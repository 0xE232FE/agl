package main

import "os"
import "fmt"

func main() {
    data := os.ReadFile("examples/adventOfCode2024/day5/data.txt")!
    parts := string(data).Split("\n\n")
    data1 := parts[0].Split("\n").Map({ $0.Split("|").Map({ $0.Int()? }) })
    updates := parts[1].Split("\n").Map({ $0.Split(",").Map({ $0.Int()? }) })
    rules := make(map[int]set[int])
    for _, d := range data1 {
        a, b := d[0], d[1]
        s := rules[a]
        if s == nil {
            s = make(set[int])
        }
        s.Insert(b)
        rules[a] = s
    }
    part1(updates, rules)
}

func isInvalid(update []int, rules map[int]set[int]) bool {
    for i, v := range update {
        s1 := rules[v]
        s2 := set[int]{}
        for _, e := range update[:i] {
            s2.Insert(e)
        }
        if s1.Intersects(s2) {
            return true
        }
    }
    return false
}

func isValid(update []int, rules map[int]set[int]) bool { !isInvalid(update, rules) }

func middlePage(update []int) int { update[update.Len() / 2] }

func part1(updates [][]int, rules map[int]set[int]) {
    fmt.Println("part1:", updates.Filter({ isValid($0, rules) }).Map(middlePage).Sum())
}