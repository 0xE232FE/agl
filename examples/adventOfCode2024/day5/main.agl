package main

import "os"
import "fmt"

var mut data1 [][]int
var mut updates [][]int
var mut rules map[int]set[int]

func main() {
    data := os.ReadFile("examples/adventOfCode2024/day5/data.txt")!
    parts := string(data).Split("\n\n")
    data1 = parts[0].Split("\n").Map({ $0.Split("|").Map({ $0.Int()? }) })
    updates = parts[1].Split("\n").Map({ $0.Split(",").Map({ $0.Int()? }) })
    rules = make(map[int]set[int])
    for _, d := range data1 {
        a, b := d[0], d[1]
        rules[a] = rules.Get(a).UnwrapOr(set[int]{}).Union([]int{b})
    }
    part1()
}

func isInvalid(update []int) bool {
    for i, v := range update {
        s1 := rules[v]
        if s1.Intersects(update[:i]) {
            return true
        }
    }
    return false
}

func isValid(update []int) bool { !isInvalid(update) }

func middlePage(update []int) int { update[update.Len() / 2] }

func part1() {
    fmt.Println("part1:", updates.Filter(isValid).Map(middlePage).Sum())
}