package main

import (
	"agl/pkg/agl"
	"context"
	"errors"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"go/types"
	"log"
	aglOs "agl1/os"
	"os/exec"
	"path/filepath"
	"runtime/debug"
	"strings"

	"github.com/urfave/cli/v3"
)

var version = "0.0.1"

func main() {
	defer func() {
		if r := recover(); r != nil {
			var aglErr *agl.AglError
			if err, ok := r.(error); ok && errors.As(err, &aglErr) {
				msg := aglErr.Error()
				if msg == "" {
					msg += string(debug.Stack())
				}
				_, _ = fmt.Fprintln(aglOs.Stderr, msg)
				aglOs.Exit(1)
			}
			panic(r)
		}
	}()
	cmd := &cli.Command{
		Name:    "AGL",
		Usage:   "AnotherGoLang",
		Version: version,
		Commands: []*cli.Command{
			{
				Name:    "run",
				Aliases: []string{"r"},
				Usage:   "run command",
				Flags: []cli.Flag{
					&cli.BoolFlag{Name: "debug"},
				},
				Action: runAction,
			},
			{
				Name:    "build",
				Aliases: []string{"b"},
				Usage:   "build command",
				Action:  buildAction,
			},
			{
				Name:    "execute",
				Aliases: []string{"e"},
				Usage:   "execute command",
				Action:  executeAction,
			},
			{
				Name:   "version",
				Usage:  "print AGL version",
				Action: versionAction,
			},
			{
				Name: "mod",
				Commands: []*cli.Command{
					{
						Name:   "init",
						Usage:  "initialize a new module",
						Action: modInitAction,
					},
					{
						Name:   "tidy",
						Action: modTidyAction,
					},
					{
						Name:   "vendor",
						Action: modVendorAction,
					},
				},
			},
		},
		Action: startAction,
	}
	if err := cmd.Run(context.Background(), aglOs.Args); err != nil {
		log.Fatal(err)
	}
}

func spawnGoRunFromBytes(source []byte, programArgs []string) ! {
	// Create a temporary directory
	tmpDir := aglOs.MkdirTemp("", "gorun")!
	defer aglOs.RemoveAll(tmpDir) // clean up

	// Create a .go file inside it
	tmpFile := filepath.Join(tmpDir, "main.go")
	aglOs.WriteFile(tmpFile, source, 0644)!

	coreFile := filepath.Join(tmpDir, "aglCore.go")
	aglOs.WriteFile(coreFile, []byte(agl.GenCore()), 0644)!

	// Run `go run` on the file with additional arguments
	cmdArgs := append([]string{"run", tmpFile, coreFile}, programArgs...)
	cmd := exec.Command("go", cmdArgs...)
	cmd.Stdout = aglOs.Stdout
	cmd.Stderr = aglOs.Stderr
	if err := cmd.Run(); err != nil {
		return Err(err)
	}
	return Ok(void)
}

func runAction(ctx context.Context, cmd *cli.Command) error {
	debugFlag := cmd.Bool("debug")

	defer func() {
		if r := recover(); r != nil {
			var aglErr *agl.AglError
			if err, ok := r.(error); ok && errors.As(err, &aglErr) {
				msg := aglErr.Error()
				if msg == "" || debugFlag {
					msg += string(debug.Stack())
				}
				_, _ = fmt.Fprintln(aglOs.Stderr, msg)
				aglOs.Exit(1)
			}
			var inferErr *agl.InferError
			if err, ok := r.(error); ok && errors.As(err, &inferErr) {
				msg := inferErr.Error()
				if msg == "" || debugFlag {
					msg += string(debug.Stack())
				}
				_, _ = fmt.Fprintln(aglOs.Stderr, msg)
				aglOs.Exit(1)
			}
			panic(r)
		}
	}()

	if cmd.NArg() == 0 {
		fmt.Println("You must specify a file to compile")
		return nil
	}
	fileName := cmd.Args().Get(0)
	if !strings.HasSuffix(fileName, ".agl") {
		fmt.Println("file must have '.agl' extension")
		return nil
	}
	by := aglOs.ReadFile(fileName)!
	fset, f := agl.ParseSrc(string(by))
	env := agl.NewEnv()
	i := agl.NewInferrer(env)
	errs := i.InferFile(fileName, f, fset, true)
	if len(errs) > 0 {
		panic(errs[0])
	}
	src := agl.NewGenerator(i.Env, f, fset).Generate()

	// Get any additional arguments to pass to the program
	var programArgs []string
	if cmd.NArg() > 1 {
		programArgs = cmd.Args().Slice()[1:] // Skip the .agl filename
	}

	spawnGoRunFromBytes([]byte(src), programArgs)!
	return nil
}

func executeAction(ctx context.Context, cmd *cli.Command) error {
	defer func() {
		if r := recover(); r != nil {
			fmt.Println("EXIT_CODE:1")
			var aglErr *agl.AglError
			if err, ok := r.(error); ok && errors.As(err, &aglErr) {
				msg := aglErr.Error()
				if msg == "" {
					msg += string(debug.Stack())
				}
				_, _ = fmt.Fprintln(aglOs.Stderr, msg)
				aglOs.Exit(1)
			}
			panic(r)
		}
	}()
	var input string
	if cmd.NArg() > 0 {
		input = cmd.Args().Get(0)
	} else {
		input = ""
	}
	fset, f := agl.ParseSrc(input)
	env := agl.NewEnv()
	i := agl.NewInferrer(env)
	i.InferFile("", f, fset, true)
	src := agl.NewGenerator(i.Env, f, fset).Generate()
	coreHeaders := agl.GenHeaders()

	out := insertHeadersAfterFirstLine(src, coreHeaders) + agl.GenContent()
	fmt.Println(out)
	return nil
}

func buildAction(ctx context.Context, cmd *cli.Command) error {
	if cmd.NArg() == 0 {
		if Err(err) := buildProject() {
			return err
		}
		return nil
	}
	fileName := cmd.Args().Get(0)
	if !strings.HasSuffix(fileName, ".agl") {
		fmt.Println("file must have '.agl' extension")
		return nil
	}
	by := aglOs.ReadFile(fileName)!
	fset, f := agl.ParseSrc(string(by))
	env := agl.NewEnv()
	i := agl.NewInferrer(env)
	i.InferFile(fileName, f, fset, true)
	src := agl.NewGenerator(i.Env, f, fset).Generate()
	path := strings.Replace(fileName, ".agl", ".go", 1)
	aglOs.WriteFile(path, []byte(src), 0644)!

	coreFile := filepath.Join(filepath.Dir(path), "aglCore.go")
	aglOs.WriteFile(coreFile, []byte(agl.GenCore()), 0644)!

	return nil
}

func buildProject() ! {
	visited := set[string]{}
	buildFolder(".", visited)!
	cmd := exec.Command("go", "build")
	cmd.Stdout = aglOs.Stdout
	cmd.Stderr = aglOs.Stderr
	if err := cmd.Run(); err != nil {
		return Err(err)
	}
	return Ok(void)
}

const modPrefix = "agl/" // TODO get from go.mod

func buildFolder(folderPath string, visited set[string]) ! {
	if visited.Contains(folderPath) {
		return Ok(void)
	}
	visited.Insert(folderPath)
	entries := aglOs.ReadDir(folderPath)!
	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}
		fileName := filepath.Join(folderPath, entry.Name())
		if fileName.HasSuffix(".agl") {
			if buildAglFile(fileName).IsErr() {
				panic(fmt.Sprintf("failed to build %s", fileName))
			}
		} else if fileName.HasSuffix(".go") {
			if fileName.HasSuffix("_test.go") {
				continue
			}
			src := aglOs.ReadFile(fileName)!
			fset := token.NewFileSet()
			node, err := parser.ParseFile(fset, fileName, src, parser.AllErrors)
			if err != nil {
				log.Printf("failed to parse %s\n", fileName)
				continue
			}
			conf := types.Config{Importer: nil}
			info := &types.Info{Defs: make(map[*ast.Ident]types.Object)}
			_, _ = conf.Check("", fset, []*ast.File{node}, info)
			for _, decl := range node.Decls {
				switch d := decl.(type) {
				case *ast.GenDecl:
					for _, spec := range d.Specs {
						switch s := spec.(type) {
						case *ast.ImportSpec:
							pathValue := strings.ReplaceAll(s.Path.Value, `"`, ``)
							if strings.HasPrefix(pathValue, modPrefix) {
								newPath := strings.TrimPrefix(pathValue, modPrefix)
								buildFolder(newPath, visited)!
							}
						}
					}
				}
			}
		}
	}
	return Ok(void)
}

func buildAglFile(fileName string) ! {
	by := aglOs.ReadFile(fileName)!
	fset, f := agl.ParseSrc(string(by))
	env := agl.NewEnv()
	i := agl.NewInferrer(env)
	i.InferFile(fileName, f, fset, true)
	src := agl.NewGenerator(i.Env, f, fset).Generate()
	path := strings.Replace(fileName, ".agl", "_agl.go", 1)
	aglOs.WriteFile(path, []byte(src), 0644)!
	return Ok(void)
}

func startAction(ctx context.Context, cmd *cli.Command) error {
	if cmd.NArg() == 0 {
		fmt.Println("You must specify a file to compile")
		return nil
	}
	fileName := cmd.Args().Get(0)
	if fileName == "run" {
		return runAction(ctx, cmd)
	}
	if !fileName.HasSuffix(".agl") {
		fmt.Println("file must have '.agl' extension")
		return nil
	}
	by := aglOs.ReadFile(fileName)!
	fset, f := agl.ParseSrc(string(by))
	env := agl.NewEnv()
	i := agl.NewInferrer(env)
	i.InferFile(fileName, f, fset, true)
	g := agl.NewGenerator(i.Env, f, fset)
	fmt.Println(g.Generate())
	return nil
}

func insertHeadersAfterFirstLine(src, headers string) string {
	lines := strings.Split(src, "\n")
	if len(lines) == 0 {
		return src
	}

	// Find the package declaration line
	packageLineIndex := -1
	for i, line := range lines {
		if strings.HasPrefix(strings.TrimSpace(line), "package ") {
			packageLineIndex = i
			break
		}
	}

	if packageLineIndex == -1 {
		// If no package declaration found, just prepend headers
		return headers + "\n" + src
	}

	// Insert headers after the package declaration
	var result []string
	result = append(result, lines[:packageLineIndex+1]...)
	result = append(result, headers)
	result = append(result, lines[packageLineIndex+1:]...)

	return strings.Join(result, "\n")
}

func modInitAction(_ context.Context, c *cli.Command) error {
	cmd := exec.Command("go", "mod", "init", c.Args().First())
	cmd.Stdout = aglOs.Stdout
	cmd.Stderr = aglOs.Stderr
	return cmd.Run()
}

func modTidyAction(_ context.Context, c *cli.Command) error {
	cmd := exec.Command("go", "mod", "tidy")
	cmd.Stdout = aglOs.Stdout
	cmd.Stderr = aglOs.Stderr
	return cmd.Run()
}

func modVendorAction(_ context.Context, c *cli.Command) error {
	entries := aglOs.ReadDir(".")!
	var imports []string
	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}
		if entry.Name().HasSuffix(".agl") {
			by := aglOs.ReadFile(entry.Name())!
			_, f := agl.ParseSrc(string(by))
			for _, i := range f.Imports {
				imports = append(imports, fmt.Sprintf("import _ %s", i.Path.Value))
			}
		}
	}
	importsStr := imports.Joined("\n")
	const tmpGoFile = "aglTmp.go"
	aglOs.WriteFile(tmpGoFile, []byte("package main\n"+importsStr), 0644)!
	defer aglOs.Remove(tmpGoFile)
	cmd := exec.Command("go", "mod", "vendor")
	cmd.Stdout = aglOs.Stdout
	cmd.Stderr = aglOs.Stderr
	return cmd.Run()
}

func versionAction(ctx context.Context, cmd *cli.Command) error {
	fmt.Printf("AGL v%s\n", version)
	return nil
}
